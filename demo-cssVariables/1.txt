又称css变量  新特性
自定义属性和 Sass、Less 这些处理器语言一个非常重要的不同点在于：native 浏览器是可以解析自定义属性的。
这就意味着开发者可以在 运行时 动态地改变自定义属性的值

- 变量的声明
既然是变量 就先看变量声明
自定义属性的定义由 -- 开头，这样浏览器能够区分自定义属性和原生属性  

变量名大小写敏感
变量的值可以是数值、字符串、多个值的组合

- 读取变量
var()函数用于读取变量
如果开发者并没有定义过 --p-margin 这个变量呢？var() 可以接收第二个参数作为缺省值：

第二个参数不处理内部的逗号或空格，都视作参数的一部分。


- 变量值的类型
变量的值可以是颜色、字符串、多个值的组合
var()函数还可以用在变量的声明，可以与其他字符串拼接

数值与单位直接写在一起，这是无效的。必须使用calc()函数，将它们连接
涉及到值的计算（calc()）  1px代表单位

- 
所以当var()函数用作在声明和使用的时候 与其他变量组合使用 涉及表达式的时候 要格外留心（声明尽量不用表达式，使用记得带上cale）

如果变量值带有单位，就不能写成字符串


- 作用域

- 与JS
***可以被 JavaScript 读取。这意味着，可以把样式配置写在 CSS 变量中，让 JavaScript 操作。
所以说 CSS 变量提供了 JavaScript 与 CSS 通信的一种途径。

- 兼容性
CSS自定义属性除了IE外的主流浏览器都支持
微软的Edge考虑支持中


  - 兼容性处理
有很多PostCSS插件的实例，但他们的实现没有完全正确而又和标准一致的，更重要的是，他们都不是动态的。

  - 应用场景1
逻辑上的变化可能伴随着大面积视觉表现上的更改，典型的例子就是选择主题
但通过自定义属性，问题能得到不小的简化：只要改变位于 DOM 结构中最高点的元素，接着让浏览器去改变该节点之下的节点
JavaScript 根本不需要知道哪些元素哪些属性会发生变化，也不需要开发者维护受影响的元素列表。
为风格统一而使用颜色变量

  - 应用场景2
配合去实现网格布局。

以上所有的配置统统是纯 CSS 实现的，不需要切换不同的类名改变网格的布局。
这说明，模块开发者不需要提供一系列 CSS 类名给模块使用者了。只要提供了 CSS 变量，模块使用者就能灵活地去设置它们，也不再受限于开发者提供的类名。
